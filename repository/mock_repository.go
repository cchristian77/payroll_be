// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -package repository -source=contract.go -destination=mock_repository.go *
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/cchristian77/payroll_be/domain"
	util "github.com/cchristian77/payroll_be/util"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAttendance mocks base method.
func (m *MockRepository) CreateAttendance(ctx context.Context, data *domain.Attendance) (*domain.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttendance", ctx, data)
	ret0, _ := ret[0].(*domain.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttendance indicates an expected call of CreateAttendance.
func (mr *MockRepositoryMockRecorder) CreateAttendance(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttendance", reflect.TypeOf((*MockRepository)(nil).CreateAttendance), ctx, data)
}

// CreatePayslip mocks base method.
func (m *MockRepository) CreatePayslip(ctx context.Context, data *domain.Payslip) (*domain.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayslip", ctx, data)
	ret0, _ := ret[0].(*domain.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayslip indicates an expected call of CreatePayslip.
func (mr *MockRepositoryMockRecorder) CreatePayslip(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayslip", reflect.TypeOf((*MockRepository)(nil).CreatePayslip), ctx, data)
}

// CreateSession mocks base method.
func (m *MockRepository) CreateSession(ctx context.Context, data *domain.Session) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, data)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRepositoryMockRecorder) CreateSession(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRepository)(nil).CreateSession), ctx, data)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, data *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, data)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, data)
}

// DeleteSessionByID mocks base method.
func (m *MockRepository) DeleteSessionByID(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionByID indicates an expected call of DeleteSessionByID.
func (mr *MockRepositoryMockRecorder) DeleteSessionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionByID", reflect.TypeOf((*MockRepository)(nil).DeleteSessionByID), ctx, id)
}

// FindAttendanceByIDAndUserID mocks base method.
func (m *MockRepository) FindAttendanceByIDAndUserID(ctx context.Context, id, userID uint64) (*domain.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAttendanceByIDAndUserID", ctx, id, userID)
	ret0, _ := ret[0].(*domain.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttendanceByIDAndUserID indicates an expected call of FindAttendanceByIDAndUserID.
func (mr *MockRepositoryMockRecorder) FindAttendanceByIDAndUserID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttendanceByIDAndUserID", reflect.TypeOf((*MockRepository)(nil).FindAttendanceByIDAndUserID), ctx, id, userID)
}

// FindAttendanceByUserIDAndDate mocks base method.
func (m *MockRepository) FindAttendanceByUserIDAndDate(ctx context.Context, userID uint64, date time.Time) (*domain.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAttendanceByUserIDAndDate", ctx, userID, date)
	ret0, _ := ret[0].(*domain.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttendanceByUserIDAndDate indicates an expected call of FindAttendanceByUserIDAndDate.
func (mr *MockRepositoryMockRecorder) FindAttendanceByUserIDAndDate(ctx, userID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttendanceByUserIDAndDate", reflect.TypeOf((*MockRepository)(nil).FindAttendanceByUserIDAndDate), ctx, userID, date)
}

// FindAttendancesByUserIDAndDateRange mocks base method.
func (m *MockRepository) FindAttendancesByUserIDAndDateRange(ctx context.Context, userID uint64, startDate, endDate time.Time) ([]*domain.Attendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAttendancesByUserIDAndDateRange", ctx, userID, startDate, endDate)
	ret0, _ := ret[0].([]*domain.Attendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttendancesByUserIDAndDateRange indicates an expected call of FindAttendancesByUserIDAndDateRange.
func (mr *MockRepositoryMockRecorder) FindAttendancesByUserIDAndDateRange(ctx, userID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttendancesByUserIDAndDateRange", reflect.TypeOf((*MockRepository)(nil).FindAttendancesByUserIDAndDateRange), ctx, userID, startDate, endDate)
}

// FindBatchUsers mocks base method.
func (m *MockRepository) FindBatchUsers(ctx context.Context, batchSize int, lastID uint64) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBatchUsers", ctx, batchSize, lastID)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBatchUsers indicates an expected call of FindBatchUsers.
func (mr *MockRepositoryMockRecorder) FindBatchUsers(ctx, batchSize, lastID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBatchUsers", reflect.TypeOf((*MockRepository)(nil).FindBatchUsers), ctx, batchSize, lastID)
}

// FindOverlappingPayrollPeriods mocks base method.
func (m *MockRepository) FindOverlappingPayrollPeriods(ctx context.Context, startDate, endDate time.Time) ([]domain.PayrollPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOverlappingPayrollPeriods", ctx, startDate, endDate)
	ret0, _ := ret[0].([]domain.PayrollPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOverlappingPayrollPeriods indicates an expected call of FindOverlappingPayrollPeriods.
func (mr *MockRepositoryMockRecorder) FindOverlappingPayrollPeriods(ctx, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOverlappingPayrollPeriods", reflect.TypeOf((*MockRepository)(nil).FindOverlappingPayrollPeriods), ctx, startDate, endDate)
}

// FindOvertimeByIDAndUserID mocks base method.
func (m *MockRepository) FindOvertimeByIDAndUserID(ctx context.Context, id, userID uint64) (*domain.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOvertimeByIDAndUserID", ctx, id, userID)
	ret0, _ := ret[0].(*domain.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOvertimeByIDAndUserID indicates an expected call of FindOvertimeByIDAndUserID.
func (mr *MockRepositoryMockRecorder) FindOvertimeByIDAndUserID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOvertimeByIDAndUserID", reflect.TypeOf((*MockRepository)(nil).FindOvertimeByIDAndUserID), ctx, id, userID)
}

// FindOvertimeByUserIDAndDate mocks base method.
func (m *MockRepository) FindOvertimeByUserIDAndDate(ctx context.Context, userID uint64, date time.Time) (*domain.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOvertimeByUserIDAndDate", ctx, userID, date)
	ret0, _ := ret[0].(*domain.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOvertimeByUserIDAndDate indicates an expected call of FindOvertimeByUserIDAndDate.
func (mr *MockRepositoryMockRecorder) FindOvertimeByUserIDAndDate(ctx, userID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOvertimeByUserIDAndDate", reflect.TypeOf((*MockRepository)(nil).FindOvertimeByUserIDAndDate), ctx, userID, date)
}

// FindOvertimesByUserIDAndDateRange mocks base method.
func (m *MockRepository) FindOvertimesByUserIDAndDateRange(ctx context.Context, userID uint64, startDate, endDate time.Time) ([]*domain.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOvertimesByUserIDAndDateRange", ctx, userID, startDate, endDate)
	ret0, _ := ret[0].([]*domain.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOvertimesByUserIDAndDateRange indicates an expected call of FindOvertimesByUserIDAndDateRange.
func (mr *MockRepositoryMockRecorder) FindOvertimesByUserIDAndDateRange(ctx, userID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOvertimesByUserIDAndDateRange", reflect.TypeOf((*MockRepository)(nil).FindOvertimesByUserIDAndDateRange), ctx, userID, startDate, endDate)
}

// FindPayrollPeriodByID mocks base method.
func (m *MockRepository) FindPayrollPeriodByID(ctx context.Context, id uint64) (*domain.PayrollPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPayrollPeriodByID", ctx, id)
	ret0, _ := ret[0].(*domain.PayrollPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPayrollPeriodByID indicates an expected call of FindPayrollPeriodByID.
func (mr *MockRepositoryMockRecorder) FindPayrollPeriodByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPayrollPeriodByID", reflect.TypeOf((*MockRepository)(nil).FindPayrollPeriodByID), ctx, id)
}

// FindPayslipByUserIDAndPayrollPeriodID mocks base method.
func (m *MockRepository) FindPayslipByUserIDAndPayrollPeriodID(ctx context.Context, userID, payrollPeriodID uint64) (*domain.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPayslipByUserIDAndPayrollPeriodID", ctx, userID, payrollPeriodID)
	ret0, _ := ret[0].(*domain.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPayslipByUserIDAndPayrollPeriodID indicates an expected call of FindPayslipByUserIDAndPayrollPeriodID.
func (mr *MockRepositoryMockRecorder) FindPayslipByUserIDAndPayrollPeriodID(ctx, userID, payrollPeriodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPayslipByUserIDAndPayrollPeriodID", reflect.TypeOf((*MockRepository)(nil).FindPayslipByUserIDAndPayrollPeriodID), ctx, userID, payrollPeriodID)
}

// FindPayslipPaginated mocks base method.
func (m *MockRepository) FindPayslipPaginated(ctx context.Context, payrollPeriodID uint64, search string, p *util.Pagination) ([]*domain.Payslip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPayslipPaginated", ctx, payrollPeriodID, search, p)
	ret0, _ := ret[0].([]*domain.Payslip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPayslipPaginated indicates an expected call of FindPayslipPaginated.
func (mr *MockRepositoryMockRecorder) FindPayslipPaginated(ctx, payrollPeriodID, search, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPayslipPaginated", reflect.TypeOf((*MockRepository)(nil).FindPayslipPaginated), ctx, payrollPeriodID, search, p)
}

// FindPayslipSumTotalSalary mocks base method.
func (m *MockRepository) FindPayslipSumTotalSalary(ctx context.Context, payrollPeriodID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPayslipSumTotalSalary", ctx, payrollPeriodID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPayslipSumTotalSalary indicates an expected call of FindPayslipSumTotalSalary.
func (mr *MockRepositoryMockRecorder) FindPayslipSumTotalSalary(ctx, payrollPeriodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPayslipSumTotalSalary", reflect.TypeOf((*MockRepository)(nil).FindPayslipSumTotalSalary), ctx, payrollPeriodID)
}

// FindReimbursementByIDAndUserID mocks base method.
func (m *MockRepository) FindReimbursementByIDAndUserID(ctx context.Context, id, userID uint64) (*domain.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReimbursementByIDAndUserID", ctx, id, userID)
	ret0, _ := ret[0].(*domain.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReimbursementByIDAndUserID indicates an expected call of FindReimbursementByIDAndUserID.
func (mr *MockRepositoryMockRecorder) FindReimbursementByIDAndUserID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReimbursementByIDAndUserID", reflect.TypeOf((*MockRepository)(nil).FindReimbursementByIDAndUserID), ctx, id, userID)
}

// FindReimbursementsByPayslipID mocks base method.
func (m *MockRepository) FindReimbursementsByPayslipID(ctx context.Context, payslipID uint64) ([]*domain.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReimbursementsByPayslipID", ctx, payslipID)
	ret0, _ := ret[0].([]*domain.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReimbursementsByPayslipID indicates an expected call of FindReimbursementsByPayslipID.
func (mr *MockRepositoryMockRecorder) FindReimbursementsByPayslipID(ctx, payslipID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReimbursementsByPayslipID", reflect.TypeOf((*MockRepository)(nil).FindReimbursementsByPayslipID), ctx, payslipID)
}

// FindReimbursementsByUserIDAndStatus mocks base method.
func (m *MockRepository) FindReimbursementsByUserIDAndStatus(ctx context.Context, userID uint64, status string) ([]*domain.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReimbursementsByUserIDAndStatus", ctx, userID, status)
	ret0, _ := ret[0].([]*domain.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReimbursementsByUserIDAndStatus indicates an expected call of FindReimbursementsByUserIDAndStatus.
func (mr *MockRepositoryMockRecorder) FindReimbursementsByUserIDAndStatus(ctx, userID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReimbursementsByUserIDAndStatus", reflect.TypeOf((*MockRepository)(nil).FindReimbursementsByUserIDAndStatus), ctx, userID, status)
}

// FindSessionByID mocks base method.
func (m *MockRepository) FindSessionByID(ctx context.Context, id uint64) (*domain.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSessionByID", ctx, id)
	ret0, _ := ret[0].(*domain.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSessionByID indicates an expected call of FindSessionByID.
func (mr *MockRepositoryMockRecorder) FindSessionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSessionByID", reflect.TypeOf((*MockRepository)(nil).FindSessionByID), ctx, id)
}

// FindUserByID mocks base method.
func (m *MockRepository) FindUserByID(ctx context.Context, id uint64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockRepositoryMockRecorder) FindUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockRepository)(nil).FindUserByID), ctx, id)
}

// FindUserByUsername mocks base method.
func (m *MockRepository) FindUserByUsername(ctx context.Context, username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockRepositoryMockRecorder) FindUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockRepository)(nil).FindUserByUsername), ctx, username)
}

// RevokeSessionByID mocks base method.
func (m *MockRepository) RevokeSessionByID(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSessionByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSessionByID indicates an expected call of RevokeSessionByID.
func (mr *MockRepositoryMockRecorder) RevokeSessionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSessionByID", reflect.TypeOf((*MockRepository)(nil).RevokeSessionByID), ctx, id)
}

// UpdateAttendance mocks base method.
func (m *MockRepository) UpdateAttendance(ctx context.Context, data *domain.Attendance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttendance", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttendance indicates an expected call of UpdateAttendance.
func (mr *MockRepositoryMockRecorder) UpdateAttendance(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttendance", reflect.TypeOf((*MockRepository)(nil).UpdateAttendance), ctx, data)
}

// UpsertOvertime mocks base method.
func (m *MockRepository) UpsertOvertime(ctx context.Context, data *domain.Overtime) (*domain.Overtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOvertime", ctx, data)
	ret0, _ := ret[0].(*domain.Overtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertOvertime indicates an expected call of UpsertOvertime.
func (mr *MockRepositoryMockRecorder) UpsertOvertime(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOvertime", reflect.TypeOf((*MockRepository)(nil).UpsertOvertime), ctx, data)
}

// UpsertPayrollPeriod mocks base method.
func (m *MockRepository) UpsertPayrollPeriod(ctx context.Context, data *domain.PayrollPeriod) (*domain.PayrollPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPayrollPeriod", ctx, data)
	ret0, _ := ret[0].(*domain.PayrollPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPayrollPeriod indicates an expected call of UpsertPayrollPeriod.
func (mr *MockRepositoryMockRecorder) UpsertPayrollPeriod(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPayrollPeriod", reflect.TypeOf((*MockRepository)(nil).UpsertPayrollPeriod), ctx, data)
}

// UpsertReimbursement mocks base method.
func (m *MockRepository) UpsertReimbursement(ctx context.Context, data *domain.Reimbursement) (*domain.Reimbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertReimbursement", ctx, data)
	ret0, _ := ret[0].(*domain.Reimbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertReimbursement indicates an expected call of UpsertReimbursement.
func (mr *MockRepositoryMockRecorder) UpsertReimbursement(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertReimbursement", reflect.TypeOf((*MockRepository)(nil).UpsertReimbursement), ctx, data)
}
